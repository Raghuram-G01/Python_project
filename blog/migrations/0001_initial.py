# Generated by Django 4.2.7 on 2025-05-29 06:00

import ckeditor_uploader.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description')),
                ('color', models.CharField(default='#6366f1', help_text='Hex color code', max_length=7)),
                ('icon', models.CharField(blank=True, help_text='Font Awesome icon class', max_length=50)),
                ('is_featured', models.BooleanField(default=False, help_text='Show in featured categories')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='Post title (minimum 5 characters)', max_length=200, validators=[django.core.validators.MinLengthValidator(5)])),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(help_text='Post content with rich text editor')),
                ('excerpt', models.TextField(blank=True, help_text='Brief description (auto-generated if empty)', max_length=500)),
                ('featured_image', models.ImageField(blank=True, help_text='Featured image for the post', null=True, upload_to='posts/images/')),
                ('featured_image_alt', models.CharField(blank=True, help_text='Alt text for featured image', max_length=200)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', help_text='Post status', max_length=10)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('meta_description', models.CharField(blank=True, help_text='Meta description for SEO (auto-generated if empty)', max_length=160)),
                ('meta_keywords', models.CharField(blank=True, help_text='Meta keywords for SEO', max_length=255)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('like_count', models.PositiveIntegerField(default=0)),
                ('share_count', models.PositiveIntegerField(default=0)),
                ('reading_time', models.PositiveIntegerField(default=1, help_text='Estimated reading time in minutes')),
                ('is_featured', models.BooleanField(default=False, help_text='Show in featured posts')),
                ('allow_comments', models.BooleanField(default=True, help_text='Allow comments on this post')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogpost_set', to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(blank=True, help_text='Post category', null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.category')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='Tags for the post', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='blog.blogpost')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['post', 'created_at'], name='blog_postvi_post_id_2e6acd_idx'), models.Index(fields=['ip_address'], name='blog_postvi_ip_addr_e37efe_idx')],
            },
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='blog.blogpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user'], name='blog_postli_user_id_fee6c8_idx'), models.Index(fields=['post'], name='blog_postli_post_id_889d11_idx')],
                'unique_together': {('user', 'post')},
            },
        ),
        migrations.CreateModel(
            name='PostBookmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to='blog.blogpost')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmarks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user'], name='blog_postbo_user_id_4c982a_idx'), models.Index(fields=['post'], name='blog_postbo_post_id_bca577_idx')],
                'unique_together': {('user', 'post')},
            },
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['status', 'published_at'], name='blog_blogpo_status_aa5436_idx'),
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['author', 'status'], name='blog_blogpo_author__e8757b_idx'),
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['category'], name='blog_blogpo_categor_c7bd72_idx'),
        ),
        migrations.AddIndex(
            model_name='blogpost',
            index=models.Index(fields=['is_featured'], name='blog_blogpo_is_feat_aa3e07_idx'),
        ),
    ]
